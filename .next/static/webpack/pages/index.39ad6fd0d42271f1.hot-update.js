/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("// import { useState, useEffect } from \"react\";\n// import { ethers } from \"ethers\";\n// import Web3Modal from \"web3modal\";\n// import Header from \"../components/Header\";\n// import \"../styles/index.module.css\";\n// const pinataJWT = process.env.NEXT_PUBLIC_PINATA_JWT;\n// const contractAddress = \"0xf44Bb3d88339dB415e9b04042eE28353C6Dc097B\";\n// const contractABI =  [\n//   {\n//     \"anonymous\": false,\n//     \"inputs\": [\n//       { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"fileId\", \"type\": \"uint256\" },\n//       { \"indexed\": false, \"internalType\": \"string\", \"name\": \"ipfsHash\", \"type\": \"string\" },\n//       { \"indexed\": false, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }\n//     ],\n//     \"name\": \"FileStored\",\n//     \"type\": \"event\"\n//   },\n//   {\n//     \"inputs\": [{ \"internalType\": \"string\", \"name\": \"_ipfsHash\", \"type\": \"string\" }],\n//     \"name\": \"storeFile\",\n//     \"outputs\": [],\n//     \"stateMutability\": \"nonpayable\",\n//     \"type\": \"function\"\n//   },\n//   {\n//     \"inputs\": [],\n//     \"name\": \"getFiles\",\n//     \"outputs\": [{ \"internalType\": \"string[]\", \"name\": \"\", \"type\": \"string[]\" }],\n//     \"stateMutability\": \"view\",\n//     \"type\": \"function\"\n//   }\n// ];\n// export default function Home() {\n//   const [file, setFile] = useState(null);\n//   const [uploadedFiles, setUploadedFiles] = useState([]);\n//   useEffect(() => {\n//     fetchUploadedFiles();\n//   }, []);\n//   const uploadToIPFS = async (event) => {\n//     const selectedFile = event.target.files[0];\n//     if (!selectedFile || !pinataJWT) return;\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n//     formData.append(\"pinataMetadata\", JSON.stringify({ name: selectedFile.name }));\n//     formData.append(\"pinataOptions\", JSON.stringify({ cidVersion: 1 }));\n//     try {\n//       const res = await fetch(\"https://api.pinata.cloud/pinning/pinFileToIPFS\", {\n//         method: \"POST\",\n//         headers: { Authorization: `Bearer ${pinataJWT}` },\n//         body: formData,\n//       });\n//       const data = await res.json();\n//       if (!data.IpfsHash) throw new Error(\"Failed to upload file\");\n//       setFile(data.IpfsHash);\n//     } catch (error) {\n//       console.error(\"Error uploading to Pinata:\", error);\n//     }\n//   };\n//   async function saveFileOnBlockchain() {\n//     if (!file) return alert(\"Upload a file first!\");\n//     try {\n//       const web3Modal = new Web3Modal();\n//       const connection = await web3Modal.connect();\n//       const provider = new ethers.BrowserProvider(connection);\n//       const signer = await provider.getSigner();\n//       const contract = new ethers.Contract(contractAddress, contractABI, signer);\n//       const tx = await contract.storeFile(file);\n//       await tx.wait();\n//       alert(\"File stored successfully!\");\n//       fetchUploadedFiles();\n//     } catch (error) {\n//       console.error(\"Error storing file:\", error);\n//     }\n//   }\n//   async function fetchUploadedFiles() {\n//     try {\n//       const web3Modal = new Web3Modal();\n//       const connection = await web3Modal.connect();\n//       const provider = new ethers.BrowserProvider(connection);\n//       const signer = await provider.getSigner();\n//       const contract = new ethers.Contract(contractAddress, contractABI, signer);\n//       const files = await contract.getFiles();\n//       if (!Array.isArray(files)) {\n//         console.error(\"Unexpected response from contract:\", files);\n//         return;\n//       }\n//       const formattedFiles = files.map((hash) => ({\n//         fileUrl: `https://gateway.pinata.cloud/ipfs/${hash}`,\n//         fileName: hash.substring(0, 10) + \"...\",\n//       }));\n//       setUploadedFiles(formattedFiles);\n//     } catch (error) {\n//       console.log(\"Error fetching files:\", error);\n//     }\n//   }\n//   return (\n//     <div className=\"file-storage-container\">\n//       <Header />\n//       <div className=\"file-storage-wrapper\">\n//         <h1 className=\"file-storage-title\">Decentralized File Storage</h1>\n//         <input type=\"file\" onChange={uploadToIPFS} className=\"file-input\" />\n//         <button onClick={saveFileOnBlockchain} className=\"store-btn\">\n//           Store File\n//         </button>\n//         <h2 className=\"uploaded-files-title\">Uploaded Files</h2>\n//         <div className=\"files-grid\">\n//           {uploadedFiles.length > 0 ? (\n//             uploadedFiles.map((file, index) => (\n//               <div key={index} className=\"file-card\">\n//                 {file.fileUrl.match(/\\.(jpeg|jpg|gif|png|webp|svg)$/i) ? (\n//                   <img src={file.fileUrl} alt=\"Uploaded file\" className=\"file-image\" />\n//                 ) : (\n//                   <div className=\"file-placeholder\">ðŸ“„ File</div>\n//                 )}\n//                 <p className=\"file-name\">{file.fileName}</p>\n//                 <a href={file.fileUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"file-link\">\n//                   Open File\n//                 </a>\n//               </div>\n//             ))\n//           ) : (\n//             <p>No files uploaded yet.</p>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/index.js\n"));

/***/ })

});